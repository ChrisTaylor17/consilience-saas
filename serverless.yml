service: consilience-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMODB_USERS_TABLE: ${self:service}-${self:provider.stage}-users
    DYNAMODB_PROJECTS_TABLE: ${self:service}-${self:provider.stage}-projects
    DYNAMODB_CHATS_TABLE: ${self:service}-${self:provider.stage}-chats
    BEDROCK_MODEL_ID: ${env:BEDROCK_MODEL_ID, 'anthropic.claude-v2'}
    BEDROCK_REGION: ${env:BEDROCK_REGION, 'us-east-1'}
    SOLANA_RPC_URL: ${env:SOLANA_RPC_URL, 'https://api.devnet.solana.com'}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USERS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_PROJECTS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_CHATS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USERS_TABLE}/index/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_PROJECTS_TABLE}/index/*"
    - Effect: Allow
      Action:
        - bedrock:InvokeModel
      Resource: "*"

functions:
  api:
    handler: backend/src/server.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    timeout: 30

  websocket:
    handler: backend/src/websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: walletAddress
            AttributeType: S
        KeySchema:
          - AttributeName: walletAddress
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_PROJECTS_TABLE}
        AttributeDefinitions:
          - AttributeName: projectId
            AttributeType: S
          - AttributeName: creatorWallet
            AttributeType: S
        KeySchema:
          - AttributeName: projectId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CreatorWalletIndex
            KeySchema:
              - AttributeName: creatorWallet
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ChatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_CHATS_TABLE}
        AttributeDefinitions:
          - AttributeName: chatId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: chatId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline